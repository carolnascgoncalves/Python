import oracledb
import pandas as pd
 
# Estabelecendo conexão
connection = oracledb.connect(
    user="rm564786",
    password="201106",
    dsn="oracle.fiap.com.br:1521/orcl"
)
 
print("Conexão estabelecida com sucesso!")

'''
========== FAZENDO COM JSON ==========
# import json
# dados = {
#     "user": "rm564786",
#     "password": "201106",
#     "dsn": "oracle.fiap.com.br:1521/orcl"
# }
 
# DATA_FILE = "oracle_conn.json"
# file = open(DATA_FILE, 'w')
# xfile = json.dump(dados, file)

# connection = oracledb.connect(
#     user=xfile['user'],
#     password=xfile['password'],
#     dsn=xfile['dsn'],
# )
'''

cursor = connection.cursor()
 
# Executando a consulta para listar as tabelas do esquema atual
cursor.execute("SELECT table_name FROM user_tables")
cursor.execute("SELECT 'VENDEDOR' FROM user_tables")

 
# Buscando e imprimindo todas as tabelas
tables = cursor.fetchall()

# create_table_query = '''
# CREATE TABLE iris (
#     id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#     sepal_length FLOAT,
#     sepal_width FLOAT,
#     petal_length FLOAT,
#     petal_width FLOAT,
#     class_id NUMBER,
#     class VARCHAR2(50)
# )
# '''
 
# cursor.execute(create_table_query)
# print("Tabela 'iris' criada com sucesso.")

create_table_query = '''
CREATE TABLE funcionario(
    id_fun number primary key,
    nome_fun varchar(50) not null,
    idade_fun number,
    funcao_fun varchar(30) not null)
'''

drop_table_query = '''
DROP TABLE teste cascade constraints
'''

alter_table_query = '''
alter table teste add (nome_teste varchar(50) not null,
                       dsc_teste varchar(100))
'''

insert_table_query = '''
insert into funcionario(id_fun, nome_fun, funcao_fun)
values(1, 'Carol', 'estagiario')
'''

cursor.execute(insert_table_query)
connection.commit()


# df = pd.read_csv('iris.csv')
# print(df)

# insert_query = '''
# INSERT INTO iris (sepal_length, sepal_width, petal_length, petal_width, class_id, class)
# VALUES (:1, :2, :3, :4, :5, :6)
# '''
 
# # Converter o DataFrame para uma lista de tuplas
# data = [tuple(row) for row in df.itertuples(index=False)]

# # Inserir os dados na tabela 'iris'
# cursor.executemany(insert_query, data)
# connection.commit()
 
# print(f"{cursor.rowcount} registros inseridos com sucesso.")
 
# # Fechar o cursor e a conexão
cursor.close()
connection.close()